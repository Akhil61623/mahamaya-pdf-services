from flask import Flask, render_template_string, request, send_file, after_this_request
import os, io, zipfile, tempfile, shutil
from threading import Timer
from werkzeug.utils import secure_filename

# PyMuPDF
import fitz  # pymupdf

app = Flask(__name__)

FREE_MAX_PAGES = 25
FREE_MAX_MB = 25

INDEX_HTML = r"""
<!doctype html>
<html lang="hi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Mahamaya Stationery — PDF → Image Converter</title>
<style>
  :root{--bg:#0b1220;--fg:#e7eaf1;--muted:#93a2bd;--card:#10182b;--accent:#4f8cff;--ok:#22c55e;--err:#ef4444;}
  *{box-sizing:border-box} body{margin:0;font-family:system-ui,Segoe UI,Roboto,Arial;background:var(--bg);color:var(--fg)}
  .wrap{min-height:100svh;display:grid;place-items:center;padding:24px}
  .card{width:min(880px,100%);background:linear-gradient(180deg,#0f172a 0,#0b1220 100%);border:1px solid #1f2a44;border-radius:18px;padding:22px;box-shadow:0 10px 40px rgba(0,0,0,.35)}
  h1{margin:.2rem 0 .4rem} .muted{color:var(--muted)}
  .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap;margin:.6rem 0}
  input,select{background:#0e1629;border:1px solid #243356;color:var(--fg);border-radius:10px;padding:10px 12px;outline:none}
  .btn{background:var(--accent);color:#fff;border:1px solid #2b3a60;border-radius:12px;padding:10px 14px;font-weight:700;cursor:pointer}
  .note{font-size:12px;color:var(--muted)}
  .alert{margin-top:10px;padding:10px 12px;border-radius:12px;display:none;font-weight:600}
  .ok{background:rgba(34,197,94,.1);border:1px solid rgba(34,197,94,.25);color:var(--ok)}
  .err{background:rgba(239,68,68,.1);border:1px solid rgba(239,68,68,.25);color:var(--err)}
  .loader{display:none;align-items:center;gap:10px}
  .spinner{width:18px;height:18px;border:3px solid rgba(255,255,255,.25);border-top-color:#fff;border-radius:50%;animation:spin 1s linear infinite}
  @keyframes spin{to{transform:rotate(360deg)}}
</style>
</head>
<body>
<div class="wrap">
  <div class="card">
    <h1>Mahamaya Stationery — PDF → Image Converter</h1>
    <p class="muted">Free up to <b>25 pages</b> or <b>25 MB</b>. उसके ऊपर फिलहाल conversion रोका जाएगा (पेमेंट इंटीग्रेशन अगला स्टेप है)।</p>

    <div class="row">
      <input id="file" type="file" accept="application/pdf"/>
      <label>DPI:
        <select id="dpi">
          <option value="150">150 (तेज़)</option>
          <option value="200">200</option>
          <option value="300">300 (शार्प)</option>
        </select>
      </label>
      <label>Format:
        <select id="fmt">
          <option value="JPEG">JPG</option>
          <option value="PNG">PNG</option>
        </select>
      </label>
      <input id="range" type="text" placeholder="पेज रेंज: 1-3,5 (खाली = सभी)"/>
      <button id="go" class="btn">Convert & Download ZIP</button>
    </div>

    <div class="loader" id="loader"><div class="spinner"></div><div class="note">Converting… कृपया इंतज़ार करें</div></div>
    <div id="ok" class="alert ok"></div>
    <div id="err" class="alert err"></div>
    <p class="note">टिप: बड़े PDFs पर 150 DPI या पेज रेंज चुनना तेज़ रहता है।</p>
  </div>
</div>
<script>
const fileEl=document.getElementById('file');
const go=document.getElementById('go');
const ok=document.getElementById('ok');
const err=document.getElementById('err');
const loader=document.getElementById('loader');

function show(el,msg){ el.textContent=msg; el.style.display='block'; }
function hide(el){ el.style.display='none'; }

go.onclick=async()=>{
  hide(ok); hide(err); loader.style.display='flex';
  try{
    if(!fileEl.files.length){ show(err,"कृपया PDF चुनें"); return; }
    const fd=new FormData();
    fd.append('pdf', fileEl.files[0]);
    fd.append('dpi', document.getElementById('dpi').value);
    fd.append('fmt', document.getElementById('fmt').value);
    fd.append('range', document.getElementById('range').value);

    const res = await fetch('/convert', {method:'POST', body:fd});
    if(res.status===402){
      const msg = await res.text();
      show(err, msg || "Limit crossed (payment required).");
      return;
    }
    if(!res.ok){
      const t=await res.text(); throw new Error(t || ("HTTP "+res.status));
    }
    const blob=await res.blob();
    const url=URL.createObjectURL(blob);
    const a=document.createElement('a');
    a.href=url; a.download='converted_images.zip'; a.click();
    URL.revokeObjectURL(url);
    show(ok,"हो गया! Download शुरू हो गया।");
  }catch(e){ show(err, e.message || "Conversion failed."); }
  finally{ loader.style.display='none'; }
};
</script>
</body>
</html>
"""

def parse_range(range_text: str, total_pages: int):
    if not range_text:
        return list(range(1, total_pages + 1))
    pages=set()
    import re
    toks=re.split(r"\s*,\s*", range_text.strip())
    for t in toks:
        if not t: continue
        if "-" in t:
            a,b=t.split("-",1)
            if a.isdigit() and b.isdigit():
                s,e=int(a),int(b)
                if 1<=s<=total_pages and s<=e:
                    for p in range(s, min(e,total_pages)+1): pages.add(p)
        elif t.isdigit():
            p=int(t)
            if 1<=p<=total_pages: pages.add(p)
    return sorted(pages) if pages else list(range(1,total_pages+1))

@app.route("/")
def home():
    return render_template_string(INDEX_HTML)

@app.route("/healthz")
def health():
    return "OK"

@app.route("/convert", methods=["POST"])
def convert_endpoint():
    f = request.files.get("pdf")
    if not f:
        return ("No file", 400)

    # Size limit check (free)
    try:
        f.stream.seek(0, os.SEEK_END)
        size = f.stream.tell()
        f.stream.seek(0)
    except Exception:
        size = 0
    if size and size > FREE_MAX_MB * 1024 * 1024:
        return (f"File too large (Free limit {FREE_MAX_MB}MB).", 402)

    dpi = int(request.form.get("dpi","150"))
    fmt = request.form.get("fmt","JPEG").upper()
    rng = request.form.get("range","").strip()

    tmp = tempfile.mkdtemp(prefix="pdf2img_")
    try:
        safe = secure_filename(f.filename) or "input.pdf"
        pdf_path = os.path.join(tmp, safe)
        f.save(pdf_path)

        # Read PDF and count pages
        doc = fitz.open(pdf_path)
        total_pages = doc.page_count
        if total_pages > FREE_MAX_PAGES:
            doc.close()
            return (f"Too many pages (Free limit {FREE_MAX_PAGES}).", 402)

        pages = parse_range(rng, total_pages)
        # Render pages to images
        # dpi to zoom: 72 dpi base -> zoom = dpi/72
        zoom = dpi / 72.0
        mat = fitz.Matrix(zoom, zoom)

        memzip = io.BytesIO()
        with zipfile.ZipFile(memzip, "w", compression=zipfile.ZIP_DEFLATED) as zf:
            for idx, pno in enumerate(pages, 1):
                page = doc.load_page(pno-1)
                pix = page.get_pixmap(matrix=mat, alpha=False)
                ext = "jpg" if fmt == "JPEG" else "png"
                fname = f"page_{idx}.{ext}"
                zf.writestr(fname, pix.tobytes(ext=ext))
        doc.close()
        memzip.seek(0)

        @after_this_request
        def cleanup(resp):
            Timer(3.0, shutil.rmtree, args=[tmp], kwargs={"ignore_errors": True}).start()
            return resp

        return send_file(memzip, as_attachment=True, download_name="converted_images.zip", mimetype="application/zip")

    except Exception as e:
        Timer(1.0, shutil.rmtree, args=[tmp], kwargs={"ignore_errors": True}).start()
        return (f"Error: {e}", 500)

if __name__ == "__main__":
    app.run(debug=False, host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
